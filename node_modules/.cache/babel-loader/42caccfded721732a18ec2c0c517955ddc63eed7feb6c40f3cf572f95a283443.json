{"ast":null,"code":"var _jsxFileName = \"/Users/rizwan/Documents/FoodDelhiveryApp/src/LocationSelector.js\",\n  _s = $RefreshSig$();\n// src/LocationSelector.js\nimport React, { useState } from 'react';\nimport { useApp } from './context';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCATIONS = {\n  'delhi': {\n    lat: 28.7041,\n    lng: 77.1025\n  },\n  'mumbai': {\n    lat: 19.0760,\n    lng: 72.8777\n  },\n  'bangalore': {\n    lat: 12.9716,\n    lng: 77.5946\n  },\n  'dhanbad': {\n    lat: 23.7957,\n    lng: 86.4304\n  },\n  'hyderabad': {\n    lat: 17.3850,\n    lng: 78.4867\n  }\n};\nconst LocationSelector = () => {\n  _s();\n  const {\n    setUserLocation,\n    setUserCity\n  } = useApp();\n  const [cityInput, setCityInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const handleCityChange = e => {\n    const input = e.target.value;\n    setCityInput(input);\n    if (input.length > 2) {\n      const filteredSuggestions = Object.keys(LOCATIONS).filter(city => city.toLowerCase().startsWith(input.toLowerCase()));\n      setSuggestions(filteredSuggestions);\n    } else {\n      setSuggestions([]); // Clear suggestions if input is too short\n    }\n  };\n  const handleSuggestionClick = city => {\n    setCityInput(city); // Set the input value to the selected city\n    setSuggestions([]); // Clear suggestions\n\n    // Update the global state with the selected city's location and name\n    const location = LOCATIONS[city.toLowerCase()];\n    if (location) {\n      setUserLocation(location);\n      setUserCity(city);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: 20,\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter city (e.g., Delhi, Mumbai)\",\n      value: cityInput,\n      onChange: handleCityChange,\n      className: \"search-input\",\n      style: {\n        width: '250px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions-list\",\n      children: suggestions.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSuggestionClick(city),\n        children: city.charAt(0).toUpperCase() + city.slice(1)\n      }, city, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationSelector, \"Rcbq/9F4LE1U5oJgwmNukMhjUi0=\", false, function () {\n  return [useApp];\n});\n_c = LocationSelector;\nexport default LocationSelector;\nvar _c;\n$RefreshReg$(_c, \"LocationSelector\");","map":{"version":3,"names":["React","useState","useApp","jsxDEV","_jsxDEV","LOCATIONS","lat","lng","LocationSelector","_s","setUserLocation","setUserCity","cityInput","setCityInput","suggestions","setSuggestions","handleCityChange","e","input","target","value","length","filteredSuggestions","Object","keys","filter","city","toLowerCase","startsWith","handleSuggestionClick","location","style","marginLeft","position","children","type","placeholder","onChange","className","width","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/Users/rizwan/Documents/FoodDelhiveryApp/src/LocationSelector.js"],"sourcesContent":["// src/LocationSelector.js\nimport React, { useState } from 'react';\nimport { useApp } from './context';\nimport './App.css';\n\nconst LOCATIONS = {\n  'delhi': { lat: 28.7041, lng: 77.1025 },\n  'mumbai': { lat: 19.0760, lng: 72.8777 },\n  'bangalore': { lat: 12.9716, lng: 77.5946 },\n  'dhanbad': { lat: 23.7957, lng: 86.4304 },\n  'hyderabad': { lat: 17.3850, lng: 78.4867 },\n};\n\nconst LocationSelector = () => {\n  const { setUserLocation, setUserCity } = useApp();\n  const [cityInput, setCityInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleCityChange = (e) => {\n    const input = e.target.value;\n    setCityInput(input);\n\n    if (input.length > 2) {\n      const filteredSuggestions = Object.keys(LOCATIONS).filter(city =>\n        city.toLowerCase().startsWith(input.toLowerCase())\n      );\n      setSuggestions(filteredSuggestions);\n    } else {\n      setSuggestions([]); // Clear suggestions if input is too short\n    }\n  };\n\n  const handleSuggestionClick = (city) => {\n    setCityInput(city); // Set the input value to the selected city\n    setSuggestions([]); // Clear suggestions\n    \n    // Update the global state with the selected city's location and name\n    const location = LOCATIONS[city.toLowerCase()];\n    if (location) {\n      setUserLocation(location);\n      setUserCity(city);\n    }\n  };\n\n  return (\n    <div style={{ marginLeft: 20, position: 'relative' }}>\n      <input\n        type=\"text\"\n        placeholder=\"Enter city (e.g., Delhi, Mumbai)\"\n        value={cityInput}\n        onChange={handleCityChange}\n        className=\"search-input\"\n        style={{ width: '250px' }}\n      />\n      {suggestions.length > 0 && (\n        <ul className=\"suggestions-list\">\n          {suggestions.map(city => (\n            <li key={city} onClick={() => handleSuggestionClick(city)}>\n              {city.charAt(0).toUpperCase() + city.slice(1)}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default LocationSelector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}