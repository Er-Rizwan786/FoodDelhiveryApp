{"ast":null,"code":"\n\n// src/RestaurantList.js\n\n// import React, { useState, useEffect, useMemo } from 'react';\n// import { fetchRestaurants, extractRestaurants, extractSectionTitle } from './api';\n// import { useApp } from './context';\n// import { NavLink } from 'react-router-dom';\n// import './App.css';\n\n// const DEFAULT_LAT = 28.7041;\n// const DEFAULT_LNG = 77.1025;\n\n// const RestaurantCard = ({ data }) => {\n//   const { name, cloudinaryImageId, avgRating, cuisines = [], areaName, sla = {}, id } = { ...data?.info };\n//   const { addToCart } = useApp();\n\n//   const rupees = typeof data.info.costForTwo === 'string'\n//     ? data.info.costForTwo\n//     : Math.round((data.info.feeDetails?.amount || 19900) / 100);\n\n//   return (\n//     <div className=\"cards\">\n//       <NavLink to={`/restaurant/${id}`} className=\"card-link\">\n//         <img\n//           src={`https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/${cloudinaryImageId}`}\n//           alt={name}\n//           className=\"deliveryIcons\"\n//         />\n//         <div>\n//           <h2>{name}</h2>\n//           <h3>⭐ {avgRating ?? '--'} • {sla?.deliveryTime ?? '--'} mins</h3>\n//           <p>{cuisines.join(', ')}</p>\n//           <p>{areaName}</p>\n//         </div>\n//       </NavLink>\n//       <button\n//         onClick={() =>\n//           addToCart({\n//             id: id,\n//             name,\n//             price: typeof rupees === 'number' ? rupees : undefined,\n//             cloudinaryImageId,\n//           })\n//         }\n//       >\n//         Add to Cart\n//       </button>\n//     </div>\n//   );\n// };\n\n// const RestaurantList = () => {\n//   const [list, setList] = useState([]);\n//   const [title, setTitle] = useState(\"Top restaurants near you\");\n//   const [loading, setLoading] = useState(true);\n//   const { searchTerm, setSearchTerm, userLocation } = useApp();\n//   const [error, setError] = useState(null);\n\n//   // State to handle multiple filter options\n//   const [filters, setFilters] = useState({\n//       isRatingFilterActive: false,\n//       isPureVegFilterActive: false,\n//   });\n\n//   const toggleFilter = (filterName) => {\n//     setFilters(prevFilters => ({\n//       ...prevFilters,\n//       [filterName]: !prevFilters[filterName]\n//     }));\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       setLoading(true);\n//       setError(null);\n\n//       const latToFetch = userLocation?.lat ?? DEFAULT_LAT;\n//       const lngToFetch = userLocation?.lng ?? DEFAULT_LNG;\n\n//       try {\n//         const { restaurants, areaTitle } = await fetchRestaurants(latToFetch, lngToFetch);\n//         setList(restaurants);\n//         setTitle(areaTitle);\n//         if (restaurants.length === 0) {\n//           setError(\"Sorry, no restaurants found in this area.\");\n//         }\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError(\"Failed to load restaurants. Please check your internet connection or try again later.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [userLocation]);\n\n//   const filteredList = useMemo(() => {\n//     let currentList = list;\n\n//     // Apply the search filter\n//     if (searchTerm) {\n//       currentList = currentList.filter(r => r?.info?.name?.toLowerCase().includes(searchTerm.toLowerCase()));\n//     }\n\n//     // Apply the rating filter if it's active\n//     if (filters.isRatingFilterActive) {\n//       currentList = currentList.filter(r => r?.info?.avgRating >= 4.0);\n//     }\n\n//     // Apply the pure veg filter if it's active\n//     if (filters.isPureVegFilterActive) {\n//         currentList = currentList.filter(r => r?.info?.veg);\n//     }\n\n//     return currentList;\n//   }, [list, searchTerm, filters]);\n\n//   if (loading) return <p>Loading restaurants...</p>;\n\n//   if (error) {\n//     return (\n//       <div className=\"restaurantslist-container\" style={{ textAlign: 'center' }}>\n//         <h2>Error</h2>\n//         <p style={{ color: 'red' }}>{error}</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"restaurantslist-container\">\n//       <h2>{title || \"Top restaurants near you\"}</h2>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search restaurants...\"\n//         value={searchTerm}\n//         onChange={(e) => setSearchTerm(e.target.value)}\n//         className=\"search-input\"\n//       />\n//       <div>\n//         <ul className=\"restaurantslist\">\n//           <li className=\"restaurantslists\">Filter</li>\n//           {/* <li className=\"restaurantslists\">Sort By</li> */}\n\n//           <li \n//             className={`restaurantslists ${filters.isRatingFilterActive ? 'active-filter' : ''}`}\n//             onClick={() => toggleFilter('isRatingFilterActive')}\n//           >\n//             Rating 4.0+\n//           </li>\n\n//           {/* <li className=\"restaurantslists\">Fast Delivery</li> */}\n\n//           <li \n//             className={`restaurantslists ${filters.isPureVegFilterActive ? 'active-filter' : ''}`}\n//             onClick={() => toggleFilter('isPureVegFilterActive')}\n//           >\n//             Pure Veg\n//           </li>\n\n//           {/* <li className=\"restaurantslists\">Offers</li>\n//           <li className=\"restaurantslists\">Rs 300-600</li>\n//           <li className=\"restaurantslists\">Less than 300</li> */}\n//         </ul>\n//       </div>\n//       <div className=\"cardcontainer\">\n//         {filteredList.length > 0 ? (\n//           filteredList.map((each) => (\n//             <RestaurantCard data={each} key={each?.info?.id} />\n//           ))\n//         ) : (\n//           <p>No restaurants match your search.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RestaurantList;","map":{"version":3,"names":[],"sources":["/Users/rizwan/Documents/FoodDelhiveryApp/src/RestaurantsLists.js"],"sourcesContent":["\n\n\n// src/RestaurantList.js\n\n// import React, { useState, useEffect, useMemo } from 'react';\n// import { fetchRestaurants, extractRestaurants, extractSectionTitle } from './api';\n// import { useApp } from './context';\n// import { NavLink } from 'react-router-dom';\n// import './App.css';\n\n// const DEFAULT_LAT = 28.7041;\n// const DEFAULT_LNG = 77.1025;\n\n// const RestaurantCard = ({ data }) => {\n//   const { name, cloudinaryImageId, avgRating, cuisines = [], areaName, sla = {}, id } = { ...data?.info };\n//   const { addToCart } = useApp();\n\n//   const rupees = typeof data.info.costForTwo === 'string'\n//     ? data.info.costForTwo\n//     : Math.round((data.info.feeDetails?.amount || 19900) / 100);\n\n//   return (\n//     <div className=\"cards\">\n//       <NavLink to={`/restaurant/${id}`} className=\"card-link\">\n//         <img\n//           src={`https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/${cloudinaryImageId}`}\n//           alt={name}\n//           className=\"deliveryIcons\"\n//         />\n//         <div>\n//           <h2>{name}</h2>\n//           <h3>⭐ {avgRating ?? '--'} • {sla?.deliveryTime ?? '--'} mins</h3>\n//           <p>{cuisines.join(', ')}</p>\n//           <p>{areaName}</p>\n//         </div>\n//       </NavLink>\n//       <button\n//         onClick={() =>\n//           addToCart({\n//             id: id,\n//             name,\n//             price: typeof rupees === 'number' ? rupees : undefined,\n//             cloudinaryImageId,\n//           })\n//         }\n//       >\n//         Add to Cart\n//       </button>\n//     </div>\n//   );\n// };\n\n// const RestaurantList = () => {\n//   const [list, setList] = useState([]);\n//   const [title, setTitle] = useState(\"Top restaurants near you\");\n//   const [loading, setLoading] = useState(true);\n//   const { searchTerm, setSearchTerm, userLocation } = useApp();\n//   const [error, setError] = useState(null);\n  \n//   // State to handle multiple filter options\n//   const [filters, setFilters] = useState({\n//       isRatingFilterActive: false,\n//       isPureVegFilterActive: false,\n//   });\n\n//   const toggleFilter = (filterName) => {\n//     setFilters(prevFilters => ({\n//       ...prevFilters,\n//       [filterName]: !prevFilters[filterName]\n//     }));\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       setLoading(true);\n//       setError(null);\n      \n//       const latToFetch = userLocation?.lat ?? DEFAULT_LAT;\n//       const lngToFetch = userLocation?.lng ?? DEFAULT_LNG;\n\n//       try {\n//         const { restaurants, areaTitle } = await fetchRestaurants(latToFetch, lngToFetch);\n//         setList(restaurants);\n//         setTitle(areaTitle);\n//         if (restaurants.length === 0) {\n//           setError(\"Sorry, no restaurants found in this area.\");\n//         }\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError(\"Failed to load restaurants. Please check your internet connection or try again later.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n    \n//     fetchData();\n//   }, [userLocation]);\n\n//   const filteredList = useMemo(() => {\n//     let currentList = list;\n\n//     // Apply the search filter\n//     if (searchTerm) {\n//       currentList = currentList.filter(r => r?.info?.name?.toLowerCase().includes(searchTerm.toLowerCase()));\n//     }\n    \n//     // Apply the rating filter if it's active\n//     if (filters.isRatingFilterActive) {\n//       currentList = currentList.filter(r => r?.info?.avgRating >= 4.0);\n//     }\n    \n//     // Apply the pure veg filter if it's active\n//     if (filters.isPureVegFilterActive) {\n//         currentList = currentList.filter(r => r?.info?.veg);\n//     }\n\n//     return currentList;\n//   }, [list, searchTerm, filters]);\n\n//   if (loading) return <p>Loading restaurants...</p>;\n\n//   if (error) {\n//     return (\n//       <div className=\"restaurantslist-container\" style={{ textAlign: 'center' }}>\n//         <h2>Error</h2>\n//         <p style={{ color: 'red' }}>{error}</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"restaurantslist-container\">\n//       <h2>{title || \"Top restaurants near you\"}</h2>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search restaurants...\"\n//         value={searchTerm}\n//         onChange={(e) => setSearchTerm(e.target.value)}\n//         className=\"search-input\"\n//       />\n//       <div>\n//         <ul className=\"restaurantslist\">\n//           <li className=\"restaurantslists\">Filter</li>\n//           {/* <li className=\"restaurantslists\">Sort By</li> */}\n          \n//           <li \n//             className={`restaurantslists ${filters.isRatingFilterActive ? 'active-filter' : ''}`}\n//             onClick={() => toggleFilter('isRatingFilterActive')}\n//           >\n//             Rating 4.0+\n//           </li>\n          \n//           {/* <li className=\"restaurantslists\">Fast Delivery</li> */}\n          \n//           <li \n//             className={`restaurantslists ${filters.isPureVegFilterActive ? 'active-filter' : ''}`}\n//             onClick={() => toggleFilter('isPureVegFilterActive')}\n//           >\n//             Pure Veg\n//           </li>\n          \n//           {/* <li className=\"restaurantslists\">Offers</li>\n//           <li className=\"restaurantslists\">Rs 300-600</li>\n//           <li className=\"restaurantslists\">Less than 300</li> */}\n//         </ul>\n//       </div>\n//       <div className=\"cardcontainer\">\n//         {filteredList.length > 0 ? (\n//           filteredList.map((each) => (\n//             <RestaurantCard data={each} key={each?.info?.id} />\n//           ))\n//         ) : (\n//           <p>No restaurants match your search.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RestaurantList;"],"mappings":";;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}