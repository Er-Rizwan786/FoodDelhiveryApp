{"ast":null,"code":"// src/api.js\n\nconst SWIGGY_BASE = 'https://www.swiggy.com';\nexport function buildListingUrl(lat, lng) {\n  const params = new URLSearchParams({\n    lat: String(lat),\n    lng: String(lng),\n    'is-seo-homepage-enabled': 'true',\n    page_type: 'DESKTOP_WEB_LISTING'\n  });\n  return `${SWIGGY_BASE}/dapi/restaurants/list/v5?${params.toString()}`;\n}\nasync function safeFetchJson(url, {\n  signal\n} = {}) {\n  try {\n    const res = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*'\n      },\n      signal\n    });\n    if (!res.ok) {\n      throw new Error(`HTTP ${res.status} for ${url}`);\n    }\n    return res.json();\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.log(`Fetch aborted for ${url}`);\n    } else {\n      console.error(`Fetch error for ${url}:`, error);\n    }\n    throw error;\n  }\n}\nexport async function fetchRestaurants(lat, lng, signal) {\n  const url = buildListingUrl(lat, lng);\n  const json = await safeFetchJson(url, {\n    signal\n  });\n  return {\n    restaurants: extractRestaurants(json),\n    areaTitle: extractSectionTitle(json)\n  };\n}\nexport async function fetchMenu(restaurantId, lat, lng, signal) {\n  const params = new URLSearchParams({\n    lat: String(lat),\n    lng: String(lng),\n    restaurantId: String(restaurantId),\n    page_type: 'DESKTOP_MENU_LISTING'\n  });\n  params.set('page-type', 'REGULAR_MENU');\n  params.set('complete-menu', 'true');\n  const url = `${SWIGGY_BASE}/dapi/menu/pl?${params.toString()}`;\n  return safeFetchJson(url, {\n    signal\n  });\n}\nexport function extractBannerImages(json) {\n  var _json$data$cards, _json$data;\n  const cards = (_json$data$cards = json === null || json === void 0 ? void 0 : (_json$data = json.data) === null || _json$data === void 0 ? void 0 : _json$data.cards) !== null && _json$data$cards !== void 0 ? _json$data$cards : [];\n  for (const c of cards) {\n    var _c$card, _card$imageGridCards, _card$gridElements, _card$gridElements$in, _card$gridElements2, _card$gridElements2$i;\n    const card = c === null || c === void 0 ? void 0 : (_c$card = c.card) === null || _c$card === void 0 ? void 0 : _c$card.card;\n    const imgs = (card === null || card === void 0 ? void 0 : (_card$imageGridCards = card.imageGridCards) === null || _card$imageGridCards === void 0 ? void 0 : _card$imageGridCards.info) || (card === null || card === void 0 ? void 0 : (_card$gridElements = card.gridElements) === null || _card$gridElements === void 0 ? void 0 : (_card$gridElements$in = _card$gridElements.infoWithStyle) === null || _card$gridElements$in === void 0 ? void 0 : _card$gridElements$in.info) || (card === null || card === void 0 ? void 0 : (_card$gridElements2 = card.gridElements) === null || _card$gridElements2 === void 0 ? void 0 : (_card$gridElements2$i = _card$gridElements2.infoWithStyle) === null || _card$gridElements2$i === void 0 ? void 0 : _card$gridElements2$i.restaurants) || [];\n    const candidates = Array.isArray(imgs) ? imgs : [];\n    const imageIds = candidates.map(it => {\n      var _it$info;\n      return (it === null || it === void 0 ? void 0 : it.imageId) || (it === null || it === void 0 ? void 0 : it.cloudinaryImageId) || (it === null || it === void 0 ? void 0 : (_it$info = it.info) === null || _it$info === void 0 ? void 0 : _it$info.cloudinaryImageId);\n    }).filter(Boolean);\n    if (imageIds.length) return imageIds;\n  }\n  return [];\n}\nexport function extractSectionTitle(json) {\n  var _json$data$cards2, _json$data2;\n  const cards = (_json$data$cards2 = json === null || json === void 0 ? void 0 : (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.cards) !== null && _json$data$cards2 !== void 0 ? _json$data$cards2 : [];\n  for (const c of cards) {\n    var _c$card2, _c$card2$card, _c$card3, _c$card3$card, _c$card3$card$header, _c$card4, _c$card4$card, _c$card4$card$header;\n    const title = (c === null || c === void 0 ? void 0 : (_c$card2 = c.card) === null || _c$card2 === void 0 ? void 0 : (_c$card2$card = _c$card2.card) === null || _c$card2$card === void 0 ? void 0 : _c$card2$card.title) || (c === null || c === void 0 ? void 0 : (_c$card3 = c.card) === null || _c$card3 === void 0 ? void 0 : (_c$card3$card = _c$card3.card) === null || _c$card3$card === void 0 ? void 0 : (_c$card3$card$header = _c$card3$card.header) === null || _c$card3$card$header === void 0 ? void 0 : _c$card3$card$header.title) || (c === null || c === void 0 ? void 0 : (_c$card4 = c.card) === null || _c$card4 === void 0 ? void 0 : (_c$card4$card = _c$card4.card) === null || _c$card4$card === void 0 ? void 0 : (_c$card4$card$header = _c$card4$card.header) === null || _c$card4$card$header === void 0 ? void 0 : _c$card4$card$header.subtitle);\n    if (title) return title;\n  }\n  return '';\n}\nexport function extractRestaurants(json) {\n  var _json$data$cards3, _json$data3;\n  const cards = (_json$data$cards3 = json === null || json === void 0 ? void 0 : (_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : _json$data3.cards) !== null && _json$data$cards3 !== void 0 ? _json$data$cards3 : [];\n  for (const c of cards) {\n    var _c$card5, _card$gridElements3, _card$gridElements3$i, _card$data, _card$data$cards;\n    const card = c === null || c === void 0 ? void 0 : (_c$card5 = c.card) === null || _c$card5 === void 0 ? void 0 : _c$card5.card;\n    const restaurants = card === null || card === void 0 ? void 0 : (_card$gridElements3 = card.gridElements) === null || _card$gridElements3 === void 0 ? void 0 : (_card$gridElements3$i = _card$gridElements3.infoWithStyle) === null || _card$gridElements3$i === void 0 ? void 0 : _card$gridElements3$i.restaurants;\n    if (Array.isArray(restaurants) && restaurants.length) {\n      return restaurants;\n    }\n    const altList = card === null || card === void 0 ? void 0 : (_card$data = card.data) === null || _card$data === void 0 ? void 0 : (_card$data$cards = _card$data.cards) === null || _card$data$cards === void 0 ? void 0 : _card$data$cards.flatMap(cc => {\n      var _cc$card, _cc$card$card, _cc$card$card$gridEle, _cc$card$card$gridEle2;\n      return (cc === null || cc === void 0 ? void 0 : (_cc$card = cc.card) === null || _cc$card === void 0 ? void 0 : (_cc$card$card = _cc$card.card) === null || _cc$card$card === void 0 ? void 0 : (_cc$card$card$gridEle = _cc$card$card.gridElements) === null || _cc$card$card$gridEle === void 0 ? void 0 : (_cc$card$card$gridEle2 = _cc$card$card$gridEle.infoWithStyle) === null || _cc$card$card$gridEle2 === void 0 ? void 0 : _cc$card$card$gridEle2.restaurants) || [];\n    });\n    if (Array.isArray(altList) && altList.length) {\n      return altList;\n    }\n  }\n  return [];\n}\n\n// src/api.js\n\n// ... (all other functions remain the same) ...\n\nexport function extractMenuItems(json) {\n  const menuItems = [];\n  const visited = new Set();\n  const queue = [json];\n  while (queue.length > 0) {\n    const current = queue.shift();\n    if (typeof current !== 'object' || current === null || visited.has(current)) {\n      continue;\n    }\n    visited.add(current);\n    if (current.hasOwnProperty('info') && current.info.hasOwnProperty('id')) {\n      const itemData = current.info;\n      if (itemData.name && (itemData.price || itemData.defaultPrice)) {\n        var _itemData$dish, _itemData$dish$info;\n        // Found a potential menu item, now check for an imageId\n        const imgId = itemData.cloudinaryImageId || itemData.imageId || ((_itemData$dish = itemData.dish) === null || _itemData$dish === void 0 ? void 0 : (_itemData$dish$info = _itemData$dish.info) === null || _itemData$dish$info === void 0 ? void 0 : _itemData$dish$info.imageId);\n        if (imgId) {\n          menuItems.push({\n            id: itemData.id,\n            name: itemData.name,\n            price: (itemData.price || itemData.defaultPrice) / 100,\n            imgId: imgId\n          });\n        }\n      }\n    }\n    for (const key in current) {\n      if (current.hasOwnProperty(key)) {\n        const value = current[key];\n        if (typeof value === 'object' && value !== null) {\n          queue.push(value);\n        }\n      }\n    }\n  }\n\n  // Some structures have duplicates, so filter them out\n  const uniqueItems = Array.from(new Set(menuItems.map(item => item.id))).map(id => menuItems.find(item => item.id === id));\n  console.log(\"Extracted Menu Items:\", uniqueItems);\n  return uniqueItems;\n}","map":{"version":3,"names":["SWIGGY_BASE","buildListingUrl","lat","lng","params","URLSearchParams","String","page_type","toString","safeFetchJson","url","signal","res","fetch","method","headers","ok","Error","status","json","error","name","console","log","fetchRestaurants","restaurants","extractRestaurants","areaTitle","extractSectionTitle","fetchMenu","restaurantId","set","extractBannerImages","_json$data$cards","_json$data","cards","data","c","_c$card","_card$imageGridCards","_card$gridElements","_card$gridElements$in","_card$gridElements2","_card$gridElements2$i","card","imgs","imageGridCards","info","gridElements","infoWithStyle","candidates","Array","isArray","imageIds","map","it","_it$info","imageId","cloudinaryImageId","filter","Boolean","length","_json$data$cards2","_json$data2","_c$card2","_c$card2$card","_c$card3","_c$card3$card","_c$card3$card$header","_c$card4","_c$card4$card","_c$card4$card$header","title","header","subtitle","_json$data$cards3","_json$data3","_c$card5","_card$gridElements3","_card$gridElements3$i","_card$data","_card$data$cards","altList","flatMap","cc","_cc$card","_cc$card$card","_cc$card$card$gridEle","_cc$card$card$gridEle2","extractMenuItems","menuItems","visited","Set","queue","current","shift","has","add","hasOwnProperty","itemData","price","defaultPrice","_itemData$dish","_itemData$dish$info","imgId","dish","push","id","key","value","uniqueItems","from","item","find"],"sources":["/Users/rizwan/Documents/FoodDelhiveryApp/src/api.js"],"sourcesContent":["// src/api.js\n\nconst SWIGGY_BASE = 'https://www.swiggy.com';\n\nexport function buildListingUrl(lat, lng) {\n  const params = new URLSearchParams({\n    lat: String(lat),\n    lng: String(lng),\n    'is-seo-homepage-enabled': 'true',\n    page_type: 'DESKTOP_WEB_LISTING',\n  });\n  return `${SWIGGY_BASE}/dapi/restaurants/list/v5?${params.toString()}`;\n}\n\nasync function safeFetchJson(url, { signal } = {}) {\n  try {\n    const res = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n      },\n      signal,\n    });\n    \n    if (!res.ok) {\n      throw new Error(`HTTP ${res.status} for ${url}`);\n    }\n    return res.json();\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.log(`Fetch aborted for ${url}`);\n    } else {\n      console.error(`Fetch error for ${url}:`, error);\n    }\n    throw error;\n  }\n}\n\nexport async function fetchRestaurants(lat, lng, signal) {\n  const url = buildListingUrl(lat, lng);\n  const json = await safeFetchJson(url, { signal });\n  return {\n    restaurants: extractRestaurants(json),\n    areaTitle: extractSectionTitle(json)\n  };\n}\n\nexport async function fetchMenu(restaurantId, lat, lng, signal) {\n  const params = new URLSearchParams({\n    lat: String(lat),\n    lng: String(lng),\n    restaurantId: String(restaurantId),\n    page_type: 'DESKTOP_MENU_LISTING',\n  });\n  params.set('page-type', 'REGULAR_MENU');\n  params.set('complete-menu', 'true');\n  const url = `${SWIGGY_BASE}/dapi/menu/pl?${params.toString()}`;\n  return safeFetchJson(url, { signal });\n}\n\nexport function extractBannerImages(json) {\n  const cards = json?.data?.cards ?? [];\n  for (const c of cards) {\n    const card = c?.card?.card;\n    const imgs =\n      card?.imageGridCards?.info ||\n      card?.gridElements?.infoWithStyle?.info ||\n      card?.gridElements?.infoWithStyle?.restaurants ||\n      [];\n    const candidates = Array.isArray(imgs) ? imgs : [];\n    const imageIds = candidates\n      .map((it) => it?.imageId || it?.cloudinaryImageId || it?.info?.cloudinaryImageId)\n      .filter(Boolean);\n    if (imageIds.length) return imageIds;\n  }\n  return [];\n}\n\nexport function extractSectionTitle(json) {\n  const cards = json?.data?.cards ?? [];\n  for (const c of cards) {\n    const title =\n      c?.card?.card?.title ||\n      c?.card?.card?.header?.title ||\n      c?.card?.card?.header?.subtitle;\n    if (title) return title;\n  }\n  return '';\n}\n\nexport function extractRestaurants(json) {\n  const cards = json?.data?.cards ?? [];\n  for (const c of cards) {\n    const card = c?.card?.card;\n    const restaurants = card?.gridElements?.infoWithStyle?.restaurants;\n    if (Array.isArray(restaurants) && restaurants.length) {\n      return restaurants;\n    }\n    const altList = card?.data?.cards?.flatMap((cc) => cc?.card?.card?.gridElements?.infoWithStyle?.restaurants || []);\n    if (Array.isArray(altList) && altList.length) {\n      return altList;\n    }\n  }\n  return [];\n}\n\n// src/api.js\n\n// ... (all other functions remain the same) ...\n\nexport function extractMenuItems(json) {\n    const menuItems = [];\n    const visited = new Set();\n    const queue = [json];\n\n    while (queue.length > 0) {\n        const current = queue.shift();\n\n        if (typeof current !== 'object' || current === null || visited.has(current)) {\n            continue;\n        }\n\n        visited.add(current);\n\n        if (current.hasOwnProperty('info') && current.info.hasOwnProperty('id')) {\n            const itemData = current.info;\n            if (itemData.name && (itemData.price || itemData.defaultPrice)) {\n                // Found a potential menu item, now check for an imageId\n                const imgId = itemData.cloudinaryImageId || itemData.imageId || itemData.dish?.info?.imageId;\n                if (imgId) {\n                    menuItems.push({\n                        id: itemData.id,\n                        name: itemData.name,\n                        price: (itemData.price || itemData.defaultPrice) / 100,\n                        imgId: imgId\n                    });\n                }\n            }\n        }\n        \n        for (const key in current) {\n            if (current.hasOwnProperty(key)) {\n                const value = current[key];\n                if (typeof value === 'object' && value !== null) {\n                    queue.push(value);\n                }\n            }\n        }\n    }\n    \n    // Some structures have duplicates, so filter them out\n    const uniqueItems = Array.from(new Set(menuItems.map(item => item.id)))\n        .map(id => menuItems.find(item => item.id === id));\n    \n    console.log(\"Extracted Menu Items:\", uniqueItems);\n\n    return uniqueItems;\n}"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,wBAAwB;AAE5C,OAAO,SAASC,eAAeA,CAACC,GAAG,EAAEC,GAAG,EAAE;EACxC,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;IACjCH,GAAG,EAAEI,MAAM,CAACJ,GAAG,CAAC;IAChBC,GAAG,EAAEG,MAAM,CAACH,GAAG,CAAC;IAChB,yBAAyB,EAAE,MAAM;IACjCI,SAAS,EAAE;EACb,CAAC,CAAC;EACF,OAAO,GAAGP,WAAW,6BAA6BI,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE;AACvE;AAEA,eAAeC,aAAaA,CAACC,GAAG,EAAE;EAAEC;AAAO,CAAC,GAAG,CAAC,CAAC,EAAE;EACjD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAC3BI,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ,CAAC;MACDJ;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,GAAG,CAACI,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,QAAQL,GAAG,CAACM,MAAM,QAAQR,GAAG,EAAE,CAAC;IAClD;IACA,OAAOE,GAAG,CAACO,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,IAAI,KAAK,YAAY,EAAE;MAC/BC,OAAO,CAACC,GAAG,CAAC,qBAAqBb,GAAG,EAAE,CAAC;IACzC,CAAC,MAAM;MACLY,OAAO,CAACF,KAAK,CAAC,mBAAmBV,GAAG,GAAG,EAAEU,KAAK,CAAC;IACjD;IACA,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeI,gBAAgBA,CAACtB,GAAG,EAAEC,GAAG,EAAEQ,MAAM,EAAE;EACvD,MAAMD,GAAG,GAAGT,eAAe,CAACC,GAAG,EAAEC,GAAG,CAAC;EACrC,MAAMgB,IAAI,GAAG,MAAMV,aAAa,CAACC,GAAG,EAAE;IAAEC;EAAO,CAAC,CAAC;EACjD,OAAO;IACLc,WAAW,EAAEC,kBAAkB,CAACP,IAAI,CAAC;IACrCQ,SAAS,EAAEC,mBAAmB,CAACT,IAAI;EACrC,CAAC;AACH;AAEA,OAAO,eAAeU,SAASA,CAACC,YAAY,EAAE5B,GAAG,EAAEC,GAAG,EAAEQ,MAAM,EAAE;EAC9D,MAAMP,MAAM,GAAG,IAAIC,eAAe,CAAC;IACjCH,GAAG,EAAEI,MAAM,CAACJ,GAAG,CAAC;IAChBC,GAAG,EAAEG,MAAM,CAACH,GAAG,CAAC;IAChB2B,YAAY,EAAExB,MAAM,CAACwB,YAAY,CAAC;IAClCvB,SAAS,EAAE;EACb,CAAC,CAAC;EACFH,MAAM,CAAC2B,GAAG,CAAC,WAAW,EAAE,cAAc,CAAC;EACvC3B,MAAM,CAAC2B,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC;EACnC,MAAMrB,GAAG,GAAG,GAAGV,WAAW,iBAAiBI,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE;EAC9D,OAAOC,aAAa,CAACC,GAAG,EAAE;IAAEC;EAAO,CAAC,CAAC;AACvC;AAEA,OAAO,SAASqB,mBAAmBA,CAACb,IAAI,EAAE;EAAA,IAAAc,gBAAA,EAAAC,UAAA;EACxC,MAAMC,KAAK,IAAAF,gBAAA,GAAGd,IAAI,aAAJA,IAAI,wBAAAe,UAAA,GAAJf,IAAI,CAAEiB,IAAI,cAAAF,UAAA,uBAAVA,UAAA,CAAYC,KAAK,cAAAF,gBAAA,cAAAA,gBAAA,GAAI,EAAE;EACrC,KAAK,MAAMI,CAAC,IAAIF,KAAK,EAAE;IAAA,IAAAG,OAAA,EAAAC,oBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,mBAAA,EAAAC,qBAAA;IACrB,MAAMC,IAAI,GAAGP,CAAC,aAADA,CAAC,wBAAAC,OAAA,GAADD,CAAC,CAAEO,IAAI,cAAAN,OAAA,uBAAPA,OAAA,CAASM,IAAI;IAC1B,MAAMC,IAAI,GACR,CAAAD,IAAI,aAAJA,IAAI,wBAAAL,oBAAA,GAAJK,IAAI,CAAEE,cAAc,cAAAP,oBAAA,uBAApBA,oBAAA,CAAsBQ,IAAI,MAC1BH,IAAI,aAAJA,IAAI,wBAAAJ,kBAAA,GAAJI,IAAI,CAAEI,YAAY,cAAAR,kBAAA,wBAAAC,qBAAA,GAAlBD,kBAAA,CAAoBS,aAAa,cAAAR,qBAAA,uBAAjCA,qBAAA,CAAmCM,IAAI,MACvCH,IAAI,aAAJA,IAAI,wBAAAF,mBAAA,GAAJE,IAAI,CAAEI,YAAY,cAAAN,mBAAA,wBAAAC,qBAAA,GAAlBD,mBAAA,CAAoBO,aAAa,cAAAN,qBAAA,uBAAjCA,qBAAA,CAAmClB,WAAW,KAC9C,EAAE;IACJ,MAAMyB,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE;IAClD,MAAMQ,QAAQ,GAAGH,UAAU,CACxBI,GAAG,CAAEC,EAAE;MAAA,IAAAC,QAAA;MAAA,OAAK,CAAAD,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEE,OAAO,MAAIF,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEG,iBAAiB,MAAIH,EAAE,aAAFA,EAAE,wBAAAC,QAAA,GAAFD,EAAE,CAAER,IAAI,cAAAS,QAAA,uBAARA,QAAA,CAAUE,iBAAiB;IAAA,EAAC,CAChFC,MAAM,CAACC,OAAO,CAAC;IAClB,IAAIP,QAAQ,CAACQ,MAAM,EAAE,OAAOR,QAAQ;EACtC;EACA,OAAO,EAAE;AACX;AAEA,OAAO,SAASzB,mBAAmBA,CAACT,IAAI,EAAE;EAAA,IAAA2C,iBAAA,EAAAC,WAAA;EACxC,MAAM5B,KAAK,IAAA2B,iBAAA,GAAG3C,IAAI,aAAJA,IAAI,wBAAA4C,WAAA,GAAJ5C,IAAI,CAAEiB,IAAI,cAAA2B,WAAA,uBAAVA,WAAA,CAAY5B,KAAK,cAAA2B,iBAAA,cAAAA,iBAAA,GAAI,EAAE;EACrC,KAAK,MAAMzB,CAAC,IAAIF,KAAK,EAAE;IAAA,IAAA6B,QAAA,EAAAC,aAAA,EAAAC,QAAA,EAAAC,aAAA,EAAAC,oBAAA,EAAAC,QAAA,EAAAC,aAAA,EAAAC,oBAAA;IACrB,MAAMC,KAAK,GACT,CAAAnC,CAAC,aAADA,CAAC,wBAAA2B,QAAA,GAAD3B,CAAC,CAAEO,IAAI,cAAAoB,QAAA,wBAAAC,aAAA,GAAPD,QAAA,CAASpB,IAAI,cAAAqB,aAAA,uBAAbA,aAAA,CAAeO,KAAK,MACpBnC,CAAC,aAADA,CAAC,wBAAA6B,QAAA,GAAD7B,CAAC,CAAEO,IAAI,cAAAsB,QAAA,wBAAAC,aAAA,GAAPD,QAAA,CAAStB,IAAI,cAAAuB,aAAA,wBAAAC,oBAAA,GAAbD,aAAA,CAAeM,MAAM,cAAAL,oBAAA,uBAArBA,oBAAA,CAAuBI,KAAK,MAC5BnC,CAAC,aAADA,CAAC,wBAAAgC,QAAA,GAADhC,CAAC,CAAEO,IAAI,cAAAyB,QAAA,wBAAAC,aAAA,GAAPD,QAAA,CAASzB,IAAI,cAAA0B,aAAA,wBAAAC,oBAAA,GAAbD,aAAA,CAAeG,MAAM,cAAAF,oBAAA,uBAArBA,oBAAA,CAAuBG,QAAQ;IACjC,IAAIF,KAAK,EAAE,OAAOA,KAAK;EACzB;EACA,OAAO,EAAE;AACX;AAEA,OAAO,SAAS9C,kBAAkBA,CAACP,IAAI,EAAE;EAAA,IAAAwD,iBAAA,EAAAC,WAAA;EACvC,MAAMzC,KAAK,IAAAwC,iBAAA,GAAGxD,IAAI,aAAJA,IAAI,wBAAAyD,WAAA,GAAJzD,IAAI,CAAEiB,IAAI,cAAAwC,WAAA,uBAAVA,WAAA,CAAYzC,KAAK,cAAAwC,iBAAA,cAAAA,iBAAA,GAAI,EAAE;EACrC,KAAK,MAAMtC,CAAC,IAAIF,KAAK,EAAE;IAAA,IAAA0C,QAAA,EAAAC,mBAAA,EAAAC,qBAAA,EAAAC,UAAA,EAAAC,gBAAA;IACrB,MAAMrC,IAAI,GAAGP,CAAC,aAADA,CAAC,wBAAAwC,QAAA,GAADxC,CAAC,CAAEO,IAAI,cAAAiC,QAAA,uBAAPA,QAAA,CAASjC,IAAI;IAC1B,MAAMnB,WAAW,GAAGmB,IAAI,aAAJA,IAAI,wBAAAkC,mBAAA,GAAJlC,IAAI,CAAEI,YAAY,cAAA8B,mBAAA,wBAAAC,qBAAA,GAAlBD,mBAAA,CAAoB7B,aAAa,cAAA8B,qBAAA,uBAAjCA,qBAAA,CAAmCtD,WAAW;IAClE,IAAI0B,KAAK,CAACC,OAAO,CAAC3B,WAAW,CAAC,IAAIA,WAAW,CAACoC,MAAM,EAAE;MACpD,OAAOpC,WAAW;IACpB;IACA,MAAMyD,OAAO,GAAGtC,IAAI,aAAJA,IAAI,wBAAAoC,UAAA,GAAJpC,IAAI,CAAER,IAAI,cAAA4C,UAAA,wBAAAC,gBAAA,GAAVD,UAAA,CAAY7C,KAAK,cAAA8C,gBAAA,uBAAjBA,gBAAA,CAAmBE,OAAO,CAAEC,EAAE;MAAA,IAAAC,QAAA,EAAAC,aAAA,EAAAC,qBAAA,EAAAC,sBAAA;MAAA,OAAK,CAAAJ,EAAE,aAAFA,EAAE,wBAAAC,QAAA,GAAFD,EAAE,CAAExC,IAAI,cAAAyC,QAAA,wBAAAC,aAAA,GAARD,QAAA,CAAUzC,IAAI,cAAA0C,aAAA,wBAAAC,qBAAA,GAAdD,aAAA,CAAgBtC,YAAY,cAAAuC,qBAAA,wBAAAC,sBAAA,GAA5BD,qBAAA,CAA8BtC,aAAa,cAAAuC,sBAAA,uBAA3CA,sBAAA,CAA6C/D,WAAW,KAAI,EAAE;IAAA,EAAC;IAClH,IAAI0B,KAAK,CAACC,OAAO,CAAC8B,OAAO,CAAC,IAAIA,OAAO,CAACrB,MAAM,EAAE;MAC5C,OAAOqB,OAAO;IAChB;EACF;EACA,OAAO,EAAE;AACX;;AAEA;;AAEA;;AAEA,OAAO,SAASO,gBAAgBA,CAACtE,IAAI,EAAE;EACnC,MAAMuE,SAAS,GAAG,EAAE;EACpB,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAMC,KAAK,GAAG,CAAC1E,IAAI,CAAC;EAEpB,OAAO0E,KAAK,CAAChC,MAAM,GAAG,CAAC,EAAE;IACrB,MAAMiC,OAAO,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC;IAE7B,IAAI,OAAOD,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,IAAIH,OAAO,CAACK,GAAG,CAACF,OAAO,CAAC,EAAE;MACzE;IACJ;IAEAH,OAAO,CAACM,GAAG,CAACH,OAAO,CAAC;IAEpB,IAAIA,OAAO,CAACI,cAAc,CAAC,MAAM,CAAC,IAAIJ,OAAO,CAAC/C,IAAI,CAACmD,cAAc,CAAC,IAAI,CAAC,EAAE;MACrE,MAAMC,QAAQ,GAAGL,OAAO,CAAC/C,IAAI;MAC7B,IAAIoD,QAAQ,CAAC9E,IAAI,KAAK8E,QAAQ,CAACC,KAAK,IAAID,QAAQ,CAACE,YAAY,CAAC,EAAE;QAAA,IAAAC,cAAA,EAAAC,mBAAA;QAC5D;QACA,MAAMC,KAAK,GAAGL,QAAQ,CAACzC,iBAAiB,IAAIyC,QAAQ,CAAC1C,OAAO,MAAA6C,cAAA,GAAIH,QAAQ,CAACM,IAAI,cAAAH,cAAA,wBAAAC,mBAAA,GAAbD,cAAA,CAAevD,IAAI,cAAAwD,mBAAA,uBAAnBA,mBAAA,CAAqB9C,OAAO;QAC5F,IAAI+C,KAAK,EAAE;UACPd,SAAS,CAACgB,IAAI,CAAC;YACXC,EAAE,EAAER,QAAQ,CAACQ,EAAE;YACftF,IAAI,EAAE8E,QAAQ,CAAC9E,IAAI;YACnB+E,KAAK,EAAE,CAACD,QAAQ,CAACC,KAAK,IAAID,QAAQ,CAACE,YAAY,IAAI,GAAG;YACtDG,KAAK,EAAEA;UACX,CAAC,CAAC;QACN;MACJ;IACJ;IAEA,KAAK,MAAMI,GAAG,IAAId,OAAO,EAAE;MACvB,IAAIA,OAAO,CAACI,cAAc,CAACU,GAAG,CAAC,EAAE;QAC7B,MAAMC,KAAK,GAAGf,OAAO,CAACc,GAAG,CAAC;QAC1B,IAAI,OAAOC,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;UAC7ChB,KAAK,CAACa,IAAI,CAACG,KAAK,CAAC;QACrB;MACJ;IACJ;EACJ;;EAEA;EACA,MAAMC,WAAW,GAAG3D,KAAK,CAAC4D,IAAI,CAAC,IAAInB,GAAG,CAACF,SAAS,CAACpC,GAAG,CAAC0D,IAAI,IAAIA,IAAI,CAACL,EAAE,CAAC,CAAC,CAAC,CAClErD,GAAG,CAACqD,EAAE,IAAIjB,SAAS,CAACuB,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC,CAAC;EAEtDrF,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEuF,WAAW,CAAC;EAEjD,OAAOA,WAAW;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}