{"ast":null,"code":"// src/api.js\nconst SWIGGY_BASE = \"https://www.swiggy.com\";\n\n// Try to keep one place to change parsing if Swiggy changes shapes.\nexport async function fetchRestaurants(lat, lng, signal) {\n  var _json$data;\n  const url = `${SWIGGY_BASE}/dapi/restaurants/list/v5?lat=${lat}&lng=${lng}&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING`;\n  const res = await fetch(url, {\n    signal\n  });\n  if (!res.ok) throw new Error(`Restaurants fetch failed: ${res.status}`);\n  const json = await res.json();\n\n  // Extract restaurants from the first card that has them\n  const cards = (json === null || json === void 0 ? void 0 : (_json$data = json.data) === null || _json$data === void 0 ? void 0 : _json$data.cards) || [];\n  let restaurants = [];\n  let areaTitle = \"\";\n  for (const c of cards) {\n    var _c$card, _cardData$gridElement, _cardData$gridElement2;\n    const cardData = c === null || c === void 0 ? void 0 : (_c$card = c.card) === null || _c$card === void 0 ? void 0 : _c$card.card;\n    if (!areaTitle && cardData !== null && cardData !== void 0 && cardData.title) areaTitle = cardData.title;\n    const maybe = cardData === null || cardData === void 0 ? void 0 : (_cardData$gridElement = cardData.gridElements) === null || _cardData$gridElement === void 0 ? void 0 : (_cardData$gridElement2 = _cardData$gridElement.infoWithStyle) === null || _cardData$gridElement2 === void 0 ? void 0 : _cardData$gridElement2.restaurants;\n    if (Array.isArray(maybe) && maybe.length) {\n      restaurants = maybe;\n      break;\n    }\n  }\n  return {\n    restaurants,\n    areaTitle\n  };\n}\nexport async function fetchMenu(lat, lng, restaurantId, signal) {\n  var _json$data2;\n  // Menu endpoint (REGULAR_MENU). restaurantId must be info.id from list.\n  const url = `${SWIGGY_BASE}/dapi/menu/pl?page-type=REGULAR_MENU&complete-menu=true&lat=${lat}&lng=${lng}&restaurantId=${restaurantId}`;\n  const res = await fetch(url, {\n    signal\n  });\n  if (!res.ok) throw new Error(`Menu fetch failed: ${res.status}`);\n  const json = await res.json();\n\n  // Extract a flat array of items from regular cards\n  const cards = (json === null || json === void 0 ? void 0 : (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.cards) || [];\n  const itemCards = [];\n  for (const c of cards) {\n    var _c$groupedCard, _c$groupedCard$cardGr, _c$groupedCard$cardGr2;\n    const groupCards = c === null || c === void 0 ? void 0 : (_c$groupedCard = c.groupedCard) === null || _c$groupedCard === void 0 ? void 0 : (_c$groupedCard$cardGr = _c$groupedCard.cardGroupMap) === null || _c$groupedCard$cardGr === void 0 ? void 0 : (_c$groupedCard$cardGr2 = _c$groupedCard$cardGr.REGULAR) === null || _c$groupedCard$cardGr2 === void 0 ? void 0 : _c$groupedCard$cardGr2.cards;\n    if (!groupCards) continue;\n    for (const gc of groupCards) {\n      var _gc$card, _gc$card$card, _gc$card2, _gc$card2$card;\n      const itemCard = gc === null || gc === void 0 ? void 0 : (_gc$card = gc.card) === null || _gc$card === void 0 ? void 0 : (_gc$card$card = _gc$card.card) === null || _gc$card$card === void 0 ? void 0 : _gc$card$card.itemCards;\n      if (Array.isArray(itemCard)) {\n        itemCards.push(...itemCard);\n      }\n      // Some sections store items under categories\n      const cat = gc === null || gc === void 0 ? void 0 : (_gc$card2 = gc.card) === null || _gc$card2 === void 0 ? void 0 : (_gc$card2$card = _gc$card2.card) === null || _gc$card2$card === void 0 ? void 0 : _gc$card2$card.categories;\n      if (Array.isArray(cat)) {\n        for (const category of cat) {\n          if (Array.isArray(category === null || category === void 0 ? void 0 : category.itemCards)) {\n            itemCards.push(...category.itemCards);\n          }\n        }\n      }\n    }\n  }\n\n  // Normalize to { id, name, price, imgId } shape\n  const items = itemCards.map(ic => {\n    var _ic$card;\n    return ic === null || ic === void 0 ? void 0 : (_ic$card = ic.card) === null || _ic$card === void 0 ? void 0 : _ic$card.info;\n  }).filter(Boolean).map(info => {\n    var _ref, _info$price, _info$itemAttribute;\n    return {\n      id: info.id,\n      name: info.name,\n      // price may be price or defaultPrice; values often in paise.\n      price: ((_ref = (_info$price = info.price) !== null && _info$price !== void 0 ? _info$price : info.defaultPrice) !== null && _ref !== void 0 ? _ref : 0) / 100,\n      imgId: info.imageId || info.cloudinaryImageId || \"\",\n      veg: info.isVeg === 1 || ((_info$itemAttribute = info.itemAttribute) === null || _info$itemAttribute === void 0 ? void 0 : _info$itemAttribute.vegClassifier) === \"VEG\"\n    };\n  });\n  return {\n    items,\n    raw: json\n  };\n}","map":{"version":3,"names":["SWIGGY_BASE","fetchRestaurants","lat","lng","signal","_json$data","url","res","fetch","ok","Error","status","json","cards","data","restaurants","areaTitle","c","_c$card","_cardData$gridElement","_cardData$gridElement2","cardData","card","title","maybe","gridElements","infoWithStyle","Array","isArray","length","fetchMenu","restaurantId","_json$data2","itemCards","_c$groupedCard","_c$groupedCard$cardGr","_c$groupedCard$cardGr2","groupCards","groupedCard","cardGroupMap","REGULAR","gc","_gc$card","_gc$card$card","_gc$card2","_gc$card2$card","itemCard","push","cat","categories","category","items","map","ic","_ic$card","info","filter","Boolean","_ref","_info$price","_info$itemAttribute","id","name","price","defaultPrice","imgId","imageId","cloudinaryImageId","veg","isVeg","itemAttribute","vegClassifier","raw"],"sources":["/Users/rizwan/Documents/FoodDelhiveryApp/src/api.js"],"sourcesContent":["// src/api.js\nconst SWIGGY_BASE = \"https://www.swiggy.com\";\n\n// Try to keep one place to change parsing if Swiggy changes shapes.\nexport async function fetchRestaurants(lat, lng, signal) {\n  const url = `${SWIGGY_BASE}/dapi/restaurants/list/v5?lat=${lat}&lng=${lng}&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING`;\n  const res = await fetch(url, { signal });\n  if (!res.ok) throw new Error(`Restaurants fetch failed: ${res.status}`);\n  const json = await res.json();\n\n  // Extract restaurants from the first card that has them\n  const cards = json?.data?.cards || [];\n  let restaurants = [];\n  let areaTitle = \"\";\n\n  for (const c of cards) {\n    const cardData = c?.card?.card;\n    if (!areaTitle && cardData?.title) areaTitle = cardData.title;\n    const maybe = cardData?.gridElements?.infoWithStyle?.restaurants;\n    if (Array.isArray(maybe) && maybe.length) {\n      restaurants = maybe;\n      break;\n    }\n  }\n\n  return { restaurants, areaTitle };\n}\n\nexport async function fetchMenu(lat, lng, restaurantId, signal) {\n  // Menu endpoint (REGULAR_MENU). restaurantId must be info.id from list.\n  const url = `${SWIGGY_BASE}/dapi/menu/pl?page-type=REGULAR_MENU&complete-menu=true&lat=${lat}&lng=${lng}&restaurantId=${restaurantId}`;\n  const res = await fetch(url, { signal });\n  if (!res.ok) throw new Error(`Menu fetch failed: ${res.status}`);\n  const json = await res.json();\n\n  // Extract a flat array of items from regular cards\n  const cards = json?.data?.cards || [];\n  const itemCards = [];\n\n  for (const c of cards) {\n    const groupCards = c?.groupedCard?.cardGroupMap?.REGULAR?.cards;\n    if (!groupCards) continue;\n\n    for (const gc of groupCards) {\n      const itemCard = gc?.card?.card?.itemCards;\n      if (Array.isArray(itemCard)) {\n        itemCards.push(...itemCard);\n      }\n      // Some sections store items under categories\n      const cat = gc?.card?.card?.categories;\n      if (Array.isArray(cat)) {\n        for (const category of cat) {\n          if (Array.isArray(category?.itemCards)) {\n            itemCards.push(...category.itemCards);\n          }\n        }\n      }\n    }\n  }\n\n  // Normalize to { id, name, price, imgId } shape\n  const items = itemCards\n    .map(ic => ic?.card?.info)\n    .filter(Boolean)\n    .map(info => ({\n      id: info.id,\n      name: info.name,\n      // price may be price or defaultPrice; values often in paise.\n      price: (info.price ?? info.defaultPrice ?? 0) / 100,\n      imgId: info.imageId || info.cloudinaryImageId || \"\",\n      veg: info.isVeg === 1 || info.itemAttribute?.vegClassifier === \"VEG\",\n    }));\n\n  return { items, raw: json };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}