{"ast":null,"code":"// src/api.js\n\nconst SWIGGY_BASE = 'https://www.swiggy.com';\nexport function buildListingUrl(lat, lng) {\n  const params = new URLSearchParams({\n    lat: String(lat),\n    lng: String(lng),\n    'is-seo-homepage-enabled': 'true',\n    page_type: 'DESKTOP_WEB_LISTING'\n  });\n  return `${SWIGGY_BASE}/dapi/restaurants/list/v5?${params.toString()}`;\n}\n\n// Safe fetch wrapper\nasync function safeFetchJson(url, {\n  signal\n} = {}) {\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      // You usually don't need custom headers, but keep placeholder\n      'Accept': 'application/json, text/plain, */*'\n    },\n    signal\n  });\n  if (!res.ok) {\n    throw new Error(`HTTP ${res.status} for ${url}`);\n  }\n  return res.json();\n}\n\n// High-level: fetch restaurants by location\nexport async function fetchRestaurants(lat, lng, signal) {\n  const url = buildListingUrl(lat, lng);\n  return safeFetchJson(url, {\n    signal\n  });\n}\n\n// High-level: fetch a restaurant menu\nexport async function fetchMenu(restaurantId, lat, lng, signal) {\n  // Swiggy menu endpoint formats vary by region; this works for many cities\n  // If you already know the exact endpoint, replace below accordingly.\n  const params = new URLSearchParams({\n    lat: String(lat),\n    lng: String(lng),\n    restaurantId: String(restaurantId),\n    page_type: 'DESKTOP_MENU_LISTING'\n  });\n\n  // Common endpoint observed: dapi/menu/pl\n  // Another variant is dapi/menu/pl?page-type=REGULAR_MENU&complete-menu=true&lat=..&lng=..&restaurantId=..\n  // We'll use REGULAR_MENU as default:\n  params.set('page-type', 'REGULAR_MENU');\n  params.set('complete-menu', 'true');\n  const url = `${SWIGGY_BASE}/dapi/menu/pl?${params.toString()}`;\n  return safeFetchJson(url, {\n    signal\n  });\n}\n\n/**\n * extractBannerImages(json)\n * Returns array of cloudinaryImageId strings for top banner carousel\n */\nexport function extractBannerImages(json) {\n  var _json$data$cards, _json$data;\n  const cards = (_json$data$cards = json === null || json === void 0 ? void 0 : (_json$data = json.data) === null || _json$data === void 0 ? void 0 : _json$data.cards) !== null && _json$data$cards !== void 0 ? _json$data$cards : [];\n  // Common widgets that contain banners:\n  // - \"Whatâ€™s on your mind?\" collection\n  // - \"Top brands for you\"\n  // Sometimes the media list is within card.card.gridElements.infoWithStyle\n  for (const c of cards) {\n    var _c$card, _card$imageGridCards, _card$gridElements, _card$gridElements$in, _card$gridElements2, _card$gridElements2$i;\n    const card = c === null || c === void 0 ? void 0 : (_c$card = c.card) === null || _c$card === void 0 ? void 0 : _c$card.card;\n    const imgs = (card === null || card === void 0 ? void 0 : (_card$imageGridCards = card.imageGridCards) === null || _card$imageGridCards === void 0 ? void 0 : _card$imageGridCards.info) || (// Some payloads\n    card === null || card === void 0 ? void 0 : (_card$gridElements = card.gridElements) === null || _card$gridElements === void 0 ? void 0 : (_card$gridElements$in = _card$gridElements.infoWithStyle) === null || _card$gridElements$in === void 0 ? void 0 : _card$gridElements$in.info) || (// Fallback variant\n    card === null || card === void 0 ? void 0 : (_card$gridElements2 = card.gridElements) === null || _card$gridElements2 === void 0 ? void 0 : (_card$gridElements2$i = _card$gridElements2.infoWithStyle) === null || _card$gridElements2$i === void 0 ? void 0 : _card$gridElements2$i.restaurants) ||\n    // rare banner-as-restaurant variant\n    [];\n\n    // Normalize to array of entries with cloudinaryImageId\n    const candidates = Array.isArray(imgs) ? imgs : [];\n    const imageIds = candidates.map(it => {\n      var _it$info;\n      return (it === null || it === void 0 ? void 0 : it.imageId) || (it === null || it === void 0 ? void 0 : it.cloudinaryImageId) || (it === null || it === void 0 ? void 0 : (_it$info = it.info) === null || _it$info === void 0 ? void 0 : _it$info.cloudinaryImageId);\n    }).filter(Boolean);\n    if (imageIds.length) return imageIds;\n  }\n  return [];\n}\n\n/**\n * extractSectionTitle(json)\n * Returns a human-friendly section title, e.g., \"Top restaurant chains in ...\"\n */\nexport function extractSectionTitle(json) {\n  var _json$data$cards2, _json$data2;\n  const cards = (_json$data$cards2 = json === null || json === void 0 ? void 0 : (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.cards) !== null && _json$data$cards2 !== void 0 ? _json$data$cards2 : [];\n  for (const c of cards) {\n    var _c$card2, _c$card2$card, _c$card3, _c$card3$card, _c$card3$card$header, _c$card4, _c$card4$card, _c$card4$card$header;\n    const title = (c === null || c === void 0 ? void 0 : (_c$card2 = c.card) === null || _c$card2 === void 0 ? void 0 : (_c$card2$card = _c$card2.card) === null || _c$card2$card === void 0 ? void 0 : _c$card2$card.title) || (c === null || c === void 0 ? void 0 : (_c$card3 = c.card) === null || _c$card3 === void 0 ? void 0 : (_c$card3$card = _c$card3.card) === null || _c$card3$card === void 0 ? void 0 : (_c$card3$card$header = _c$card3$card.header) === null || _c$card3$card$header === void 0 ? void 0 : _c$card3$card$header.title) || (c === null || c === void 0 ? void 0 : (_c$card4 = c.card) === null || _c$card4 === void 0 ? void 0 : (_c$card4$card = _c$card4.card) === null || _c$card4$card === void 0 ? void 0 : (_c$card4$card$header = _c$card4$card.header) === null || _c$card4$card$header === void 0 ? void 0 : _c$card4$card$header.subtitle);\n    if (title) return title;\n  }\n  return '';\n}\n\n/**\n * extractRestaurants(json)\n * Returns an array of { info, ... } entries (Swiggy schema)\n */\nexport function extractRestaurants(json) {\n  var _json$data$cards3, _json$data3;\n  const cards = (_json$data$cards3 = json === null || json === void 0 ? void 0 : (_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : _json$data3.cards) !== null && _json$data$cards3 !== void 0 ? _json$data$cards3 : [];\n\n  // Try to locate the restaurants list wherever it is\n  for (const c of cards) {\n    var _c$card5, _card$gridElements3, _card$gridElements3$i, _card$data, _card$data$cards;\n    const card = c === null || c === void 0 ? void 0 : (_c$card5 = c.card) === null || _c$card5 === void 0 ? void 0 : _c$card5.card;\n\n    // Most common\n    const restaurants = card === null || card === void 0 ? void 0 : (_card$gridElements3 = card.gridElements) === null || _card$gridElements3 === void 0 ? void 0 : (_card$gridElements3$i = _card$gridElements3.infoWithStyle) === null || _card$gridElements3$i === void 0 ? void 0 : _card$gridElements3$i.restaurants;\n    if (Array.isArray(restaurants) && restaurants.length) {\n      return restaurants;\n    }\n\n    // Alternate payloads sometimes store directly under 'data.cards' of nested widgets\n    const altList = card === null || card === void 0 ? void 0 : (_card$data = card.data) === null || _card$data === void 0 ? void 0 : (_card$data$cards = _card$data.cards) === null || _card$data$cards === void 0 ? void 0 : _card$data$cards.flatMap(cc => {\n      var _cc$card, _cc$card$card, _cc$card$card$gridEle, _cc$card$card$gridEle2;\n      return (cc === null || cc === void 0 ? void 0 : (_cc$card = cc.card) === null || _cc$card === void 0 ? void 0 : (_cc$card$card = _cc$card.card) === null || _cc$card$card === void 0 ? void 0 : (_cc$card$card$gridEle = _cc$card$card.gridElements) === null || _cc$card$card$gridEle === void 0 ? void 0 : (_cc$card$card$gridEle2 = _cc$card$card$gridEle.infoWithStyle) === null || _cc$card$card$gridEle2 === void 0 ? void 0 : _cc$card$card$gridEle2.restaurants) || [];\n    });\n    if (Array.isArray(altList) && altList.length) {\n      return altList;\n    }\n  }\n  return [];\n}","map":{"version":3,"names":["SWIGGY_BASE","buildListingUrl","lat","lng","params","URLSearchParams","String","page_type","toString","safeFetchJson","url","signal","res","fetch","method","headers","ok","Error","status","json","fetchRestaurants","fetchMenu","restaurantId","set","extractBannerImages","_json$data$cards","_json$data","cards","data","c","_c$card","_card$imageGridCards","_card$gridElements","_card$gridElements$in","_card$gridElements2","_card$gridElements2$i","card","imgs","imageGridCards","info","gridElements","infoWithStyle","restaurants","candidates","Array","isArray","imageIds","map","it","_it$info","imageId","cloudinaryImageId","filter","Boolean","length","extractSectionTitle","_json$data$cards2","_json$data2","_c$card2","_c$card2$card","_c$card3","_c$card3$card","_c$card3$card$header","_c$card4","_c$card4$card","_c$card4$card$header","title","header","subtitle","extractRestaurants","_json$data$cards3","_json$data3","_c$card5","_card$gridElements3","_card$gridElements3$i","_card$data","_card$data$cards","altList","flatMap","cc","_cc$card","_cc$card$card","_cc$card$card$gridEle","_cc$card$card$gridEle2"],"sources":["/Users/rizwan/Documents/FoodDelhiveryApp/src/api.js"],"sourcesContent":["// src/api.js\n\nconst SWIGGY_BASE = 'https://www.swiggy.com';\n\nexport function buildListingUrl(lat, lng) {\n  const params = new URLSearchParams({\n    lat: String(lat),\n    lng: String(lng),\n    'is-seo-homepage-enabled': 'true',\n    page_type: 'DESKTOP_WEB_LISTING',\n  });\n  return `${SWIGGY_BASE}/dapi/restaurants/list/v5?${params.toString()}`;\n}\n\n// Safe fetch wrapper\nasync function safeFetchJson(url, { signal } = {}) {\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      // You usually don't need custom headers, but keep placeholder\n      'Accept': 'application/json, text/plain, */*',\n    },\n    signal,\n  });\n  if (!res.ok) {\n    throw new Error(`HTTP ${res.status} for ${url}`);\n  }\n  return res.json();\n}\n\n// High-level: fetch restaurants by location\nexport async function fetchRestaurants(lat, lng, signal) {\n  const url = buildListingUrl(lat, lng);\n  return safeFetchJson(url, { signal });\n}\n\n// High-level: fetch a restaurant menu\nexport async function fetchMenu(restaurantId, lat, lng, signal) {\n  // Swiggy menu endpoint formats vary by region; this works for many cities\n  // If you already know the exact endpoint, replace below accordingly.\n  const params = new URLSearchParams({\n    lat: String(lat),\n    lng: String(lng),\n    restaurantId: String(restaurantId),\n    page_type: 'DESKTOP_MENU_LISTING',\n  });\n\n  // Common endpoint observed: dapi/menu/pl\n  // Another variant is dapi/menu/pl?page-type=REGULAR_MENU&complete-menu=true&lat=..&lng=..&restaurantId=..\n  // We'll use REGULAR_MENU as default:\n  params.set('page-type', 'REGULAR_MENU');\n  params.set('complete-menu', 'true');\n\n  const url = `${SWIGGY_BASE}/dapi/menu/pl?${params.toString()}`;\n  return safeFetchJson(url, { signal });\n}\n\n/**\n * extractBannerImages(json)\n * Returns array of cloudinaryImageId strings for top banner carousel\n */\nexport function extractBannerImages(json) {\n  const cards = json?.data?.cards ?? [];\n  // Common widgets that contain banners:\n  // - \"Whatâ€™s on your mind?\" collection\n  // - \"Top brands for you\"\n  // Sometimes the media list is within card.card.gridElements.infoWithStyle\n  for (const c of cards) {\n    const card = c?.card?.card;\n    const imgs =\n      card?.imageGridCards?.info || // Some payloads\n      card?.gridElements?.infoWithStyle?.info || // Fallback variant\n      card?.gridElements?.infoWithStyle?.restaurants || // rare banner-as-restaurant variant\n      [];\n\n    // Normalize to array of entries with cloudinaryImageId\n    const candidates = Array.isArray(imgs) ? imgs : [];\n    const imageIds = candidates\n      .map((it) => it?.imageId || it?.cloudinaryImageId || it?.info?.cloudinaryImageId)\n      .filter(Boolean);\n\n    if (imageIds.length) return imageIds;\n  }\n  return [];\n}\n\n/**\n * extractSectionTitle(json)\n * Returns a human-friendly section title, e.g., \"Top restaurant chains in ...\"\n */\nexport function extractSectionTitle(json) {\n  const cards = json?.data?.cards ?? [];\n  for (const c of cards) {\n    const title =\n      c?.card?.card?.title ||\n      c?.card?.card?.header?.title ||\n      c?.card?.card?.header?.subtitle;\n    if (title) return title;\n  }\n  return '';\n}\n\n/**\n * extractRestaurants(json)\n * Returns an array of { info, ... } entries (Swiggy schema)\n */\nexport function extractRestaurants(json) {\n  const cards = json?.data?.cards ?? [];\n\n  // Try to locate the restaurants list wherever it is\n  for (const c of cards) {\n    const card = c?.card?.card;\n\n    // Most common\n    const restaurants = card?.gridElements?.infoWithStyle?.restaurants;\n    if (Array.isArray(restaurants) && restaurants.length) {\n      return restaurants;\n    }\n\n    // Alternate payloads sometimes store directly under 'data.cards' of nested widgets\n    const altList = card?.data?.cards?.flatMap((cc) => cc?.card?.card?.gridElements?.infoWithStyle?.restaurants || []);\n    if (Array.isArray(altList) && altList.length) {\n      return altList;\n    }\n  }\n  return [];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}